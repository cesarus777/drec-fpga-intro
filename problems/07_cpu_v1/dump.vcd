$date
	Sat Apr 13 18:36:46 2019
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module testbench $end
$var reg 1 ! clk $end
$scope module cpu_top $end
$var wire 1 ! clk $end
$var wire 32 " instr_data [31:0] $end
$var wire 32 # instr_addr [31:0] $end
$scope module core $end
$var wire 32 $ alu_b_src [31:0] $end
$var wire 1 ! clk $end
$var wire 32 % instr [31:0] $end
$var wire 32 & instr_addr [31:0] $end
$var wire 32 ' last_pc [31:0] $end
$var wire 5 ( rf_raddr0 [4:0] $end
$var wire 5 ) rf_raddr1 [4:0] $end
$var wire 5 * rf_waddr [4:0] $end
$var wire 32 + rf_wdata [31:0] $end
$var wire 5 , rs2 [4:0] $end
$var wire 5 - rs1 [4:0] $end
$var wire 1 . rf_we $end
$var wire 32 / rf_rdata1 [31:0] $end
$var wire 32 0 rf_rdata0 [31:0] $end
$var wire 5 1 rd [4:0] $end
$var wire 32 2 pc_next [31:0] $end
$var wire 32 3 instr_data [31:0] $end
$var wire 32 4 imm32 [31:0] $end
$var wire 12 5 imm12 [11:0] $end
$var wire 32 6 alu_result [31:0] $end
$var wire 3 7 alu_op [2:0] $end
$var reg 32 8 pc [31:0] $end
$scope module alu $end
$var wire 32 9 src_b [31:0] $end
$var wire 32 : src_a [31:0] $end
$var wire 3 ; op [2:0] $end
$var reg 32 < res [31:0] $end
$upscope $end
$scope module control $end
$var wire 32 = instr [31:0] $end
$var wire 7 > opcode [6:0] $end
$var wire 3 ? funct3 [2:0] $end
$var reg 3 @ alu_op [2:0] $end
$var reg 12 A imm12 [11:0] $end
$var reg 1 . rf_we $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 B raddr0 [4:0] $end
$var wire 5 C raddr1 [4:0] $end
$var wire 32 D rdata0 [31:0] $end
$var wire 32 E rdata1 [31:0] $end
$var wire 5 F waddr [4:0] $end
$var wire 32 G wdata [31:0] $end
$var wire 1 . we $end
$scope begin reg_init[0] $end
$upscope $end
$scope begin reg_init[1] $end
$upscope $end
$scope begin reg_init[2] $end
$upscope $end
$scope begin reg_init[3] $end
$upscope $end
$scope begin reg_init[4] $end
$upscope $end
$scope begin reg_init[5] $end
$upscope $end
$scope begin reg_init[6] $end
$upscope $end
$scope begin reg_init[7] $end
$upscope $end
$scope begin reg_init[8] $end
$upscope $end
$scope begin reg_init[9] $end
$upscope $end
$scope begin reg_init[10] $end
$upscope $end
$scope begin reg_init[11] $end
$upscope $end
$scope begin reg_init[12] $end
$upscope $end
$scope begin reg_init[13] $end
$upscope $end
$scope begin reg_init[14] $end
$upscope $end
$scope begin reg_init[15] $end
$upscope $end
$scope begin reg_init[16] $end
$upscope $end
$scope begin reg_init[17] $end
$upscope $end
$scope begin reg_init[18] $end
$upscope $end
$scope begin reg_init[19] $end
$upscope $end
$scope begin reg_init[20] $end
$upscope $end
$scope begin reg_init[21] $end
$upscope $end
$scope begin reg_init[22] $end
$upscope $end
$scope begin reg_init[23] $end
$upscope $end
$scope begin reg_init[24] $end
$upscope $end
$scope begin reg_init[25] $end
$upscope $end
$scope begin reg_init[26] $end
$upscope $end
$scope begin reg_init[27] $end
$upscope $end
$scope begin reg_init[28] $end
$upscope $end
$scope begin reg_init[29] $end
$upscope $end
$scope begin reg_init[30] $end
$upscope $end
$scope begin reg_init[31] $end
$upscope $end
$upscope $end
$upscope $end
$scope module rom $end
$var wire 8 H addr [7:0] $end
$var wire 1 ! clk $end
$var reg 32 I q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx I
b0 H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
b11111111111111111111111111111111 8
bx 7
bx 6
bx 5
bx 4
bx 3
b0 2
bx 1
bx 0
bx /
x.
bx -
bx ,
bx +
bx *
bx )
bx (
b111 '
b0 &
bx %
bx $
b0 #
bx "
0!
$end
#10
b1011 +
b1011 G
b1011 6
b1011 <
b1 H
b0 /
b0 E
b1011 )
b1011 C
b1011 ,
b0 0
b0 :
b0 D
b0 (
b0 B
b0 -
b101 *
b101 F
b101 1
b1011 $
b1011 9
b1011 4
b1011 5
b1011 A
b1 7
b1 ;
b1 @
1.
b10011 >
b0 ?
b1 #
b1 &
b1 2
b101100000000001010010011 %
b101100000000001010010011 =
b101100000000001010010011 "
b101100000000001010010011 3
b101100000000001010010011 I
b0 8
1!
#20
0!
#30
b10100 +
b10100 G
b10100 6
b10100 <
b10 H
b10 #
b10 &
b10 2
b1001 )
b1001 C
b1001 ,
b1011 0
b1011 :
b1011 D
b101 (
b101 B
b101 -
b111 *
b111 F
b111 1
b1001 $
b1001 9
b1001 4
b1001 5
b1001 A
b1 7
b1 ;
b1 @
1.
b1 8
b100100101000001110010011 %
b100100101000001110010011 =
b100100101000001110010011 "
b100100101000001110010011 3
b100100101000001110010011 I
1!
#40
0!
#50
b0 +
b0 G
b0 6
b0 <
b11 H
b0 )
b0 C
b0 ,
b0 0
b0 :
b0 D
b0 (
b0 B
b0 -
b0 *
b0 F
b0 1
b0 $
b0 9
b0 4
b0 5
b0 A
b1 7
b1 ;
b1 @
1.
b11 #
b11 &
b11 2
b10011 %
b10011 =
b10011 "
b10011 3
b10011 I
b10 8
1!
#60
0!
#70
b10100 +
b10100 G
b10100 6
b10100 <
b100 H
b100 #
b100 &
b100 2
b10100 0
b10100 :
b10100 D
b111 (
b111 B
b111 -
b1011 *
b1011 F
b1011 1
b1 7
b1 ;
b1 @
1.
b11 8
b111000010110010011 %
b111000010110010011 =
b111000010110010011 "
b111000010110010011 3
b111000010110010011 I
1!
#80
0!
#90
b1111 +
b1111 G
b1111 6
b1111 <
b101 H
b11011 )
b11011 C
b11011 ,
b111 *
b111 F
b111 1
b11111111111111111111111111111011 $
b11111111111111111111111111111011 9
b11111111111111111111111111111011 4
b111111111011 5
b111111111011 A
b1 7
b1 ;
b1 @
1.
b101 #
b101 &
b101 2
b11111111101100111000001110010011 %
b11111111101100111000001110010011 =
b11111111101100111000001110010011 "
b11111111101100111000001110010011 3
b11111111101100111000001110010011 I
b100 8
1!
#100
0!
#110
b0 +
b0 G
b0 6
b0 <
b110 H
b110 #
b110 &
b110 2
b0 )
b0 C
b0 ,
b0 (
b0 B
b0 -
b0 *
b0 F
b0 1
b0 $
b0 9
b0 4
b0 5
b0 A
b1 7
b1 ;
b1 @
1.
b101 8
b0 0
b0 :
b0 D
b10011 %
b10011 =
b10011 "
b10011 3
b10011 I
1!
#120
0!
#130
b111 H
b111 #
b111 &
b111 2
b110 8
1!
#140
0!
#150
b111 8
1!
