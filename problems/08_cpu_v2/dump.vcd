$date
	Sat Apr 20 17:22:42 2019
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module testbench $end
$var reg 1 ! clk $end
$scope module cpu_top $end
$var wire 1 ! clk $end
$var wire 1 " mem_we $end
$var wire 32 # mem_data [31:0] $end
$var wire 32 $ mem_addr [31:0] $end
$var wire 32 % instr_data [31:0] $end
$var wire 32 & instr_addr [31:0] $end
$var wire 16 ' data_out [15:0] $end
$scope module core $end
$var wire 1 ! clk $end
$var wire 32 ( instr [31:0] $end
$var wire 32 ) instr_addr [31:0] $end
$var wire 32 * last_pc [31:0] $end
$var wire 32 + mem_addr [31:0] $end
$var wire 32 , mem_data [31:0] $end
$var wire 5 - rf_raddr0 [4:0] $end
$var wire 5 . rf_raddr1 [4:0] $end
$var wire 5 / rf_waddr [4:0] $end
$var wire 32 0 rf_wdata [31:0] $end
$var wire 5 1 rs2 [4:0] $end
$var wire 5 2 rs1 [4:0] $end
$var wire 1 3 rf_we $end
$var wire 32 4 rf_rdata1 [31:0] $end
$var wire 32 5 rf_rdata0 [31:0] $end
$var wire 5 6 rd [4:0] $end
$var wire 32 7 pc_next [31:0] $end
$var wire 1 " mem_we $end
$var wire 32 8 instr_data [31:0] $end
$var wire 32 9 imm32 [31:0] $end
$var wire 12 : imm12 [11:0] $end
$var wire 1 ; has_imm $end
$var wire 32 < alu_result [31:0] $end
$var wire 3 = alu_op [2:0] $end
$var wire 32 > alu_b_src [31:0] $end
$var reg 32 ? pc [31:0] $end
$scope module alu $end
$var wire 32 @ src_b [31:0] $end
$var wire 32 A src_a [31:0] $end
$var wire 3 B op [2:0] $end
$var reg 32 C res [31:0] $end
$upscope $end
$scope module control $end
$var wire 32 D instr [31:0] $end
$var wire 7 E opcode [6:0] $end
$var wire 5 F funct5 [4:0] $end
$var wire 3 G funct3 [2:0] $end
$var wire 2 H funct2 [1:0] $end
$var reg 3 I alu_op [2:0] $end
$var reg 1 ; has_imm $end
$var reg 12 J imm12 [11:0] $end
$var reg 1 " mem_we $end
$var reg 1 3 rf_we $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 K raddr0 [4:0] $end
$var wire 5 L raddr1 [4:0] $end
$var wire 5 M waddr [4:0] $end
$var wire 32 N wdata [31:0] $end
$var wire 1 3 we $end
$var wire 32 O rdata1 [31:0] $end
$var wire 32 P rdata0 [31:0] $end
$scope begin reg_init[0] $end
$upscope $end
$scope begin reg_init[1] $end
$upscope $end
$scope begin reg_init[2] $end
$upscope $end
$scope begin reg_init[3] $end
$upscope $end
$scope begin reg_init[4] $end
$upscope $end
$scope begin reg_init[5] $end
$upscope $end
$scope begin reg_init[6] $end
$upscope $end
$scope begin reg_init[7] $end
$upscope $end
$scope begin reg_init[8] $end
$upscope $end
$scope begin reg_init[9] $end
$upscope $end
$scope begin reg_init[10] $end
$upscope $end
$scope begin reg_init[11] $end
$upscope $end
$scope begin reg_init[12] $end
$upscope $end
$scope begin reg_init[13] $end
$upscope $end
$scope begin reg_init[14] $end
$upscope $end
$scope begin reg_init[15] $end
$upscope $end
$scope begin reg_init[16] $end
$upscope $end
$scope begin reg_init[17] $end
$upscope $end
$scope begin reg_init[18] $end
$upscope $end
$scope begin reg_init[19] $end
$upscope $end
$scope begin reg_init[20] $end
$upscope $end
$scope begin reg_init[21] $end
$upscope $end
$scope begin reg_init[22] $end
$upscope $end
$scope begin reg_init[23] $end
$upscope $end
$scope begin reg_init[24] $end
$upscope $end
$scope begin reg_init[25] $end
$upscope $end
$scope begin reg_init[26] $end
$upscope $end
$scope begin reg_init[27] $end
$upscope $end
$scope begin reg_init[28] $end
$upscope $end
$scope begin reg_init[29] $end
$upscope $end
$scope begin reg_init[30] $end
$upscope $end
$scope begin reg_init[31] $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem_ctrl $end
$var wire 32 Q addr [31:0] $end
$var wire 1 ! clk $end
$var wire 32 R data [31:0] $end
$var wire 32 S data_in [31:0] $end
$var wire 1 " we $end
$var wire 16 T ldata [15:0] $end
$var reg 16 U data_out [15:0] $end
$upscope $end
$scope module rom $end
$var wire 3 V addr [2:0] $end
$var wire 1 ! clk $end
$var reg 32 W q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b11111111111111111111111111111111 ?
b0 >
b0 =
b0 <
0;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
03
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b111 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
0"
0!
$end
#10
b11100100000 0
b11100100000 N
b11100100000 $
b11100100000 +
b11100100000 Q
b11100100000 <
b11100100000 C
b11100100000 >
b11100100000 @
b1 V
b1011 /
b1011 M
b1011 6
1;
b11100100000 9
b11100100000 :
b11100100000 J
b1 =
b1 B
b1 I
13
b10011 E
b1 H
b1110 F
b1 &
b1 )
b1 7
b1110010000000000000010110010011 (
b1110010000000000000010110010011 D
b1110010000000000000010110010011 %
b1110010000000000000010110010011 8
b1110010000000000000010110010011 W
b0 ?
1!
#20
0!
#30
b11100100010 0
b11100100010 N
b11100100010 $
b11100100010 +
b11100100010 Q
b11100100010 <
b11100100010 C
b10 V
b11100100010 >
b11100100010 @
b10 &
b10 )
b10 7
b1111 /
b1111 M
b1111 6
b10 .
b10 L
b10 1
1;
b11100100010 9
b11100100010 :
b11100100010 J
b1 =
b1 B
b1 I
13
b1 ?
b1110010001000000000011110010011 (
b1110010001000000000011110010011 D
b1110010001000000000011110010011 %
b1110010001000000000011110010011 8
b1110010001000000000011110010011 W
1!
#40
0!
#50
b11100100010 T
b111001000010 0
b111001000010 N
b111001000010 $
b111001000010 +
b111001000010 Q
b111001000010 <
b111001000010 C
b11100100000 5
b11100100000 A
b11100100000 P
b11100100010 S
b11100100010 #
b11100100010 ,
b11100100010 R
b11100100010 4
b11100100010 O
b11100100010 >
b11100100010 @
b11 V
b1011 /
b1011 M
b1011 6
b1011 -
b1011 K
b1011 2
b1111 .
b1111 L
b1111 1
0;
b0 9
b0 :
b0 J
b1 =
b1 B
b1 I
13
b110011 E
b0 H
b0 F
b11 &
b11 )
b11 7
b111101011000010110110011 (
b111101011000010110110011 D
b111101011000010110110011 %
b111101011000010110110011 8
b111101011000010110110011 W
b10 ?
1!
#60
0!
#70
b0 T
b100 V
b0 S
b0 #
b0 ,
b0 R
b0 4
b0 O
b10000 >
b10000 @
b10000 0
b10000 N
b10000 $
b10000 +
b10000 Q
b10000 <
b10000 C
b100 &
b100 )
b100 7
b0 5
b0 A
b0 P
b111 /
b111 M
b111 6
b0 -
b0 K
b0 2
b10000 .
b10000 L
b10000 1
1;
b10000 9
b10000 :
b10000 J
b1 =
b1 B
b1 I
13
b10011 E
b11 ?
b1000000000000001110010011 (
b1000000000000001110010011 D
b1000000000000001110010011 %
b1000000000000001110010011 8
b1000000000000001110010011 W
1!
#80
0!
#90
b100000 0
b100000 N
b100000 $
b100000 +
b100000 Q
b100000 <
b100000 C
b111001000010 T
b10000 5
b10000 A
b10000 P
b111001000010 S
b111001000010 #
b111001000010 ,
b111001000010 R
b111001000010 4
b111001000010 O
b101 V
b10000 /
b10000 M
b10000 6
b111 -
b111 K
b111 2
b1011 .
b1011 L
b1011 1
1"
1;
b10000 9
b10000 :
b10000 J
b1 =
b1 B
b1 I
13
b100011 E
b10 G
b101 &
b101 )
b101 7
b101100111010100000100011 (
b101100111010100000100011 D
b101100111010100000100011 %
b101100111010100000100011 8
b101100111010100000100011 W
b100 ?
1!
#100
0!
#110
b0 T
b0 0
b0 N
b0 $
b0 +
b0 Q
b0 <
b0 C
b110 V
b0 5
b0 A
b0 P
b0 S
b0 #
b0 ,
b0 R
b0 4
b0 O
b0 >
b0 @
b110 &
b110 )
b110 7
b0 /
b0 M
b0 6
b0 -
b0 K
b0 2
b0 .
b0 L
b0 1
0"
1;
b0 9
b0 :
b0 J
b1 =
b1 B
b1 I
13
b10011 E
b0 G
b101 ?
b111001000010 '
b111001000010 U
b10011 (
b10011 D
b10011 %
b10011 8
b10011 W
1!
#120
0!
#130
b111 V
b111 &
b111 )
b111 7
b110 ?
1!
#140
0!
#150
b111 ?
1!
